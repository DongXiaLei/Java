package JavaDataStruct;

/**
 * @author Xialei Dong
 * @version 1.0
 * @date 2019/7/14 16:44
 */

/**
 *  
 * @author Xialei Dong
 * 
 * 红黑树就是一种解决非平衡树的方法，它是增加了某些特点的二叉搜索树
 * 为了能较快的时间来搜索一颗树，需要保证树总是平衡的（或者至少大部分是平衡的），
 * 就是说对树中的每个节点，它左边的后代数量和它右边的后代数量应该大致相等
 *
 * @date 2019/7/14 16:44
 */
    /*
    * 红黑规则

    当插入（或者删除）一个节点时，必须遵循一定的规则，它们被称为红黑规则。如果遵循这些规则，树就是平衡的
    1、每一个节点不是黑色就是红色
    2、根总是黑色的
    3、如果节点是红色的，则它的子节点必须是黑色的，反之则不一定成立
    4、从根到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点

    * 规则4中的空子节点是指非叶节点可以接子节点的位置。
        换句话说，就是一个有右子节点的可能接左子节点的位置，或者是有左子节点的节点可能接右子节点的位置。
        从根节点到叶节点路径上的黑色节点的数目被称为黑色高度
    * 这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。
        结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，
        这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。
    * 要知道为什么这些特性确保了这个结果，注意到规则4导致了路径不能有两个毗连的红色节点就足够了。
        最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。
        因为根据规则4所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。

    * */
public class RedBlackTree {
}
